image: python:alpine

variables:
  XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache"
  PIP_CACHE_DIR: "$XDG_CACHE_HOME/pip"
  HATCH_CACHE_DIR: "$XDG_CACHE_HOME/hatch"
  PRE_COMMIT_HOME: "$XDG_CACHE_HOME/pre-commit"
  NPM_CONFIG_CACHE: "$XDG_CACHE_HOME/npm"

cache: &global_cache
  - key: v1-pip
    paths:
      - ${PIP_CACHE_DIR}
  - key:
      files:
        - pyproject.toml
    paths:
      - ${HATCH_CACHE_DIR}

stages:
  - Lint
  - Test
  - Build
  - Publish
  - Release

default:
  before_script: &setup
    - apk add git
    - python -m pip install --upgrade pip hatch
    - python --version --version
    - pip --version
    - hatch --version

changelog:
  stage: Lint
  image: alpine:latest
  cache: {}
  before_script:
    - apk add git
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - "! git diff --quiet origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_COMMIT_SHA -- changelog.d/"
  only:
    - merge_requests
  allow_failure: true

pre-commit: &pre-commit
  stage: Lint
  cache:
    - *global_cache
    - key:
        files:
          - .pre-commit-config.yaml
      paths:
        - ${PRE_COMMIT_HOME}
        - ${NPM_CONFIG_CACHE}

  before_script:
    - apk add git nodejs
    - pip install --upgrade pip pre-commit
    - python --version --version
    - pre-commit --version
  script:
    - pre-commit run --all-files
  only:
    - master

pre-commit-changed:
  <<: *pre-commit
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - pre-commit run --from-ref origin/"$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" --to-ref "$CI_COMMIT_SHA"
  only:
    - merge_requests

smoke:
  cache:
    - key: v1-pip
      paths:
        - ${PIP_CACHE_DIR}
  image: python:3.7-alpine
  stage: Test
  variables:
    SETUPTOOLS_SCM_PRETEND_VERSION: "0.0.0"
  before_script:
    - pip install .
  script:
    - latexbuddy --help
  only:
    - master
    - merge_requests

pytest:
  parallel:
    matrix:
      - PYTHON_VERSION:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
  image: $CI_REGISTRY/latexbuddy/ci-docker-image:$PYTHON_VERSION
  stage: Test
  needs:
    - smoke
  before_script:
    - apk add build-base gcc libffi-dev
    - *setup
  script:
    - hatch run +py=$PYTHON_VERSION test:cov
  only:
    - master
    - merge_requests
  artifacts:
    when: always
    reports:
      junit: pytest-junit.xml
    paths:
      - ".coverage*"

coverage:
  image: python:3.11-alpine
  stage: Test
  needs:
    - pytest
  dependencies:
    - pytest
  script:
    - hatch run coverage:combine
    - hatch run coverage:report
    - hatch run coverage:xml
  only:
    - master
    - merge_requests
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

########################################################################
#                           RELEASE WORKFLOW                           #
########################################################################

build:
  stage: Build
  cache: {}
  script:
    - hatch build
  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz
    expire_in: 1 week
  only:
    - master
    - tags

publish:
  stage: Publish
  cache: {}
  needs:
    - build
  variables:
    HATCH_INDEX_REPO: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    HATCH_INDEX_USER: "gitlab-ci-token"
    HATCH_INDEX_AUTH: "${CI_JOB_TOKEN}"
  script:
    - hatch publish
  only:
    - tags
  dependencies:
    - build

release:
  stage: Release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apk add git
  script:
    - |
      VERSION="$(echo "$CI_COMMIT_TAG" | sed 's/\./\\./g')"
      export VERSION
    - |
      sed '/'"$VERSION"'/,/^## /!d;//d' CHANGELOG.md > CURRENT_CHANGES.md
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: ./CURRENT_CHANGES.md
